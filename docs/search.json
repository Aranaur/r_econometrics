[{"path":"index.html","id":"основи-економетрики-в-r","chapter":"Основи економетрики в R","heading":"Основи економетрики в R","text":"","code":""},{"path":"index.html","id":"передмова","chapter":"Основи економетрики в R","heading":"Передмова","text":"Наразі підручник в процесі розробки.Якщо ви помітили неточності або помилки, будь-ласка напишіть мені: ihor.miroshnychenko@kneu.ua","code":""},{"path":"introR.html","id":"introR","chapter":" 1 Вступ до R","heading":" 1 Вступ до R","text":"Мова програмування R — потужний інструмент, що широко використовується в різних сферах: статистика, візуалізація, наука про дані, машинне навчання, глибоке навчання тощо. Це безкоштовна система з відкритим кодом, з широкими можливостями, які досягаються за рахунок різноманіття покетів (packages) доповнень.\nR повністю безкоштовний та доступний для встановлення на більшість операційних систем. Крім того, є можливість працювати у хмарних додатках.\nВ той же час, R ідеально підходить для проведення економетричних досліджень.\nВивчити R не складно і цей розділ підготовить Вас до базових операцій.","code":""},{"path":"introR.html","id":"installR","chapter":" 1 Вступ до R","heading":"1.1 Встановлення R","text":"Варіантів роботи з мовою програмування R існує досить багато. Розберемо основні.","code":""},{"path":"introR.html","id":"instalpc","chapter":" 1 Вступ до R","heading":"1.1.1 Встановлення на комп’ютер","text":"Для початку необхідно встановити саму мову програмування під свою операційну систему:WindowsMacOSLinuxДля роботи в R, також слів встановити інтегроване середовище розробки (IDE) RStudio, що значно підвищує зручність, швидкість та ефективність роботи.Щоб встановити RStudio, завантажте останню версію інсталятора для Вашої операційної системи з сайту https://rstudio.com/products/rstudio/download/","code":""},{"path":"introR.html","id":"installcloud","chapter":" 1 Вступ до R","heading":"1.1.2 Використання хмарних сервісів","text":"У випадках, коли не має можливості або бажання щось додатково встановлювати на ПК є декілька хмарних сервісів:RStudio CloudGoogle Colab","code":""},{"path":"introR.html","id":"rsudio","chapter":" 1 Вступ до R","heading":"1.2 RStudio","text":"Я пропоную використовувати саме RStudio, оскільки це найзручніший інструмент для роботи з даними.\nПри чому в ній можна працювати з різними мовами програмування, в тому числі й Python.Якщо ваша операційна система — Windows, то після встановлення R та RStudio, на робочому столі у вас буде дві іконки:Перша відноситься до самої мови програмування і не буде використовуватись в роботі, друга відноситься до RStudio і саме вона нам потрібна.\nРисунок 1.1: Базовий інтерфейс RStudio\nЯк правило код пишуть у скрипті (такий собі аналог текстового редактора), тож для його створення необхідно натиснути зелений хрестик в лівому верхньому куті та обрати пункт R Script або натиснути комбінацію клавіш Ctrl+Shift+N:\nРисунок 1.2: Створення скрипта в RStudio\nПісля чого, з’явиться додаткове вікно скрипту, де можна писати код, зберігати його та повертатися до нього за потреби.\nРисунок 1.3: Інтерфейс RStudio\n1. СКРИПТ — відбувається основна робота з кодом.2. КОНСОЛЬ — повертаються результати виконання скриптів. Хоча тут так само писати код, проте він не буде збережений.3. РОБОЧИЙ ПРОСТІР — тут зберігаються змінні, завантажені датасети та побудовані моделі. Крім того є окреме вкладинка історії останніх команд.4. ГРАФІКИ та ФАЙЛИ — тут в окремих закладинках відображаються графіки, є невеличкий файловий менеджер, менеджер пакетів (про них трошки пізніше) та довідка по функціям (сюди будемо звертатися досить часто).","code":""},{"path":"introR.html","id":"rbase","chapter":" 1 Вступ до R","heading":"1.3 Базові операції","text":"R - мова програмування з широкими можливостями. З її допомогою можна будувати математичні моделі, проводити статистичні тести, візуалізовувати дані тощо. Але почнемо з чогось максимально простого, наприклад, арифметики.","code":""},{"path":"introR.html","id":"rarith","chapter":" 1 Вступ до R","heading":"1.3.1 R та арифметика","text":"Вже з “коробки,” без додаткових пакетів, R надає можливість проводити арифметичні розрахунки. Всі ці операції виконуються за допомогою типових операторів, до яких ми звикли ще з часів навчання в школі або викорситання Excel.Так, додавання додавання двох чисел використовується оператор +:Для віднімання — оператор -:Множення через оператор *:Ділення — /:Піднесення до степеню через ^:Як бачимо, нічого складного. Давайте розглянемо, ще два оператори.Залишок від ділення — %%:Цілочисельне ділення — %/%:Узагальнений перелік арифметичних операторів я помістив у наступну таблицю.","code":"\n2 + 2\n## [1] 4\n5 - 2\n## [1] 3\n3 * 5\n## [1] 15\n25 / 5\n## [1] 5\n3 ^ 3 \n## [1] 27\n5 %% 3\n## [1] 2\n17 %/% 5\n## [1] 3"},{"path":"introR.html","id":"rcomment","chapter":" 1 Вступ до R","heading":"1.3.2 Коментарі до коду","text":"Важливою складовою написання коду, окрім його зрозумілості та лаконічності, є коментарі, які допомагають оріентуватися, що відбувається в даному шматку коду.Для додавання коментарів використовується знак ришітки або, як його ще називають, діез — #. Все, що написано у рядку після # ігнорується R:Якщо необхідно “закоментувати” частину коду, тобто поставити # на початку кожного рядка, то для цього є комбінація клавіш Ctrl + Shift + C.","code":"\n# look at this awesome code\n2 + 2 - 3 + 1\n## [1] 2"},{"path":"introR.html","id":"rprior","chapter":" 1 Вступ до R","heading":"1.3.3 Пріоритети розрахунків","text":"Після знайомства з арифметикою в R постає логічне питання з приводу пріоритетів операторів. На справді тут все просто, пріоритети працюють як в математиці. Тож не забувайте правильно розставляти дужки.","code":"\n2 + 3 * 4\n## [1] 14\n\n(2 + 3) * 4\n## [1] 20"},{"path":"introR.html","id":"rfun","chapter":" 1 Вступ до R","heading":"1.3.4 Готові функції","text":"Крім звичайних арифметичних операторів в мові програмування R одразу вбудовано багато різноманітних функцій, в тому числі й математичних.Для розрахунку кореня квадратного з числа використовується функція sqrt(), яка може бути вам знайома, якщо ви користувалися англомовною версією Excel.Мова програмування R чутлива до регістру, тож варіанти Sqrt(9), SQRT(9) працювати не будуть.Разом з тим, в середині функції можна проводити математичні розрахунки:Функція abs() розраховує абсолютне значення:Розрахунок натурального логарифму через функцію log():Але це ще не все, оскільки для логарифму притаманно мати основу, то в таких випадках слід додати в середині дужок додатковий аргумент base =:Аргументи функцій можна змінювати місцями:Доречі не обов’язково писати назви аргументів функцій. Якщо ви впевнені в їх порядку запис може виглядати наступним чином:Взагалі використання функцій — важлива особливість мови програмування R. Ми можемо створювати власні функції, використовувати функції як аргументи інших функцій тощо.","code":"\n9^0.5\n## [1] 3\n\n9^(1/2)\n## [1] 3\n\nsqrt(9)\n## [1] 3\nsqrt((2 + 3) * 4)\n## [1] 4.472136\nabs(3 - 5)\n## [1] 2\nlog(15)\n## [1] 2.70805\nlog(x = 10, base = 3)\n## [1] 2.095903\nlog(base = 3, x = 10)\n## [1] 2.095903\nlog(10, 3)\n## [1] 2.095903"},{"path":"introR.html","id":"rhelp","chapter":" 1 Вступ до R","heading":"1.3.5 Вбудована документація","text":"Вже на цьому етапі може виникнути ряд питань:де знайти опис функції?які існують аргументи функцій?чи є якісь приклади використання функцій?Відповідь досить проста — всі функції супроводжуються детальною документацією. Для її виклику можна скористуватися функцією help(), де в середині дужок вказати назву функції:Інший варіант — це написати в консолі знак питання і після цього назву функції:Але на мою думку, найшвидший варіант — це написати функцію і натиснути клавішу F1 на клавіатурі.Всі зазначені варіанти приведуть вас до вікна документації у правому нижньому куті RStudio:","code":"\nhelp(abs)\n?abs()"},{"path":"introR.html","id":"rvar","chapter":" 1 Вступ до R","heading":"1.3.6 Створення змінних","text":"Ще один важливий пункт у багатьох мовах програмування — можливість зберігати значення у змінних.В R це робиться за допомогою символів <-. Для швидкого написання існує зручна комбінація клавіш Alt + -.Ліворуч від символу <- записується назва майбутньої змінної. Праворуч — значення або вираз, яке необхідно зберегти в цю змінну.Для присоювання можна використовувати і знак = але серед спільноти користувачів R це не прийнято.Слід звернути увагу, що при присвоюванні результат розрахунку не виводиться в консоль. Якщо ж хочеться переглянути результат слід використати функцію print() або просто звернутися до створеної змінної:","code":"\nx <- 2\ny <- 4\nz <- sqrt(x^2 + y^3)\nprint(z)\n## [1] 8.246211\n\nz\n## [1] 8.246211"},{"path":"introR.html","id":"rcompar","chapter":" 1 Вступ до R","heading":"1.3.7 Оператори порівняння","text":"В процесі роботи з даними, досить часто працюємо з задачами порівняння. Для вирішення таких питань в мові програмування R є зручні та зрозумілі оператори:Окремо зауважу, що для порівняння двох змінних використовується оператор з подвійним знаком дорівнює ==, а не з одним =. Це досить популярна помилка.","code":""},{"path":"introR.html","id":"rdatatype","chapter":" 1 Вступ до R","heading":"1.4 Типи даних","text":"Інформація зберігається в різних структурах даних. Це може бути число, текст, булева змінна тощо.Один з найпопулярніших варіантів збереження даних — це числовий формат. В мові програмування R для нього є окремий клас — numeric. При цьому існує три типи numeric:Цілі - integer.Дробові - double.Комплексні - complex.В більшості випадків R буде сам конвертувати числа в потрібний формат. Але якщо необхідно задати конкретний тип числа, то можна використати функції .integer(), .double() та .complex().В мові програмування R досить багато функцій, які починаються на ., які переводять об’єкт до конкретного класу. Іншими словами просить читати дані в середені дужок у відповідному форматі.Для створення цілочислового значення можна в кінці поставити символ L, щоб примусово оголосити число як integer:Функції, що починаються на . перевіряють, чи належить об’єкт до обраного класу.Для роботи з текстовими даними є клас character. Вони записуються в лапках, при цьому можна використовувати як подвійні \" так і одинарні '.Логічні (logical) данні - це тип даних які приймають лише значення TRUE або FALSE. Ми з ними вже зустрічалися коли використовували оператори порівняння.Для перевірки типу даних використовується функція class():","code":"\nis.integer(10)\n## [1] FALSE\n\nis.integer(10L)\n## [1] TRUE\nis.character(\"Ash nazg durbatulûk, ash nazg gimbatul,\n             ash nazg thrakatulûk, agh burzum-ishi krimpatul.\")\n## [1] TRUE\nclass(5)\n## [1] \"numeric\""},{"path":"introR.html","id":"r_str","chapter":" 1 Вступ до R","heading":"1.5 Структури даних","text":"\nРисунок 1.4: Структури даних R\n","code":""},{"path":"introR.html","id":"r_vec","chapter":" 1 Вступ до R","heading":"1.5.1 Вектор","text":"Почнемо з найпростішого. Вектор - це одновимірна послідовність елементів одного типу. Для створення вектору використовується функція c().Для створення послідовностей з кроком 1 зручно використовувати оператор :Для складніших послідовностей є вбудована функція seq() (не забувайте дивитися довідку по функціях)Крім того, можна задати не лише крок послідовності (аргумент =), а й довжину (аргумент length.=)Інша корисна функція rep() дозволяє створити вектор з повторюваними значеннями. Перший аргумент - значення яке слід повторювати, другий аргумент - скільки разів повторювати.При цьому і перший і другий аргумент може бути вектором:Крім того, можна об’єднувати вектори:В означенні вектора в мові програмування R сказано, що всі елементи вектори мають бути одного типу. Одразу хочеться перевірити, що буде, якщо ця умова не буде виконуватись. В більшості мов програмування ми б отримали помилку. Мова програмування R, при розбіжності типів, буде зводити все до “спільного знаменника,” тобто конвертувати дані за певними правилами - приведення типів (coercion).Виділяють два типи:неявне приведення типів (implicit coercion), коли все відбувається автоматично за вбудованими правилами.явне приведення типів (explicit coercion), коли ми самі вирішуємо до якого типу перевести дані, якщо це можливо.Приклад неявного приведення типів:TRUE перетворився в 1, а FALSE в 0.\nВ цьому випадку всі дані приведено до текстового типу:В R є своя ієрархія типів:\nNULL < raw < logical < integer < double < complex < character < list < expressionДля явного приведення типів даних використовується сімейство функцій, що починається на .:","code":"\nc(2, 4, 8, -2, -6, 0)\n## [1]  2  4  8 -2 -6  0\n\nc(\"два\", \"чотири\", \"шість\")\n## [1] \"два\"    \"чотири\" \"шість\"\n\nc(TRUE, TRUE, FALSE)\n## [1]  TRUE  TRUE FALSE\n-5:5\n##  [1] -5 -4 -3 -2 -1  0  1  2  3  4  5\n\n3:-2\n## [1]  3  2  1  0 -1 -2\nseq(1, 10, by = 2)\n## [1] 1 3 5 7 9\nseq(1, 10, length.out = 3)\n## [1]  1.0  5.5 10.0\nrep(3, 5)\n## [1] 3 3 3 3 3\nrep(1:3, 5)\n##  [1] 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\n\nrep(1:3, 1:3)\n## [1] 1 2 2 3 3 3\nv1 <- c(\"Say\", \"friend\")\n\nv2 <- c(\"and\", \"enter\")\n\nc(v1, v2)\n## [1] \"Say\"    \"friend\" \"and\"    \"enter\"\nc(TRUE, 2, FALSE)\n## [1] 1 2 0\n\n3 - TRUE\n## [1] 2\nc(TRUE, 2, \"Hello\")\n## [1] \"TRUE\"  \"2\"     \"Hello\"\nas.numeric(c(TRUE, 2, FALSE, FALSE))\n## [1] 1 2 0 0\n\nas.character(c(TRUE, 2, FALSE, FALSE))\n## [1] \"1\" \"2\" \"0\" \"0\""},{"path":"introR.html","id":"r_vec_oper","chapter":" 1 Вступ до R","heading":"1.5.1.1 Операції з векторами","text":"Всі арифметичні операції, що ми розглядали раніше, можна використовувати й до векторів однакової довжини:","code":"\nq <- 1:5\n\nw <- 2:6\n\nq + w\n## [1]  3  5  7  9 11\n\nq - w\n## [1] -1 -1 -1 -1 -1\n\nq * w\n## [1]  2  6 12 20 30\n\nq / w\n## [1] 0.5000000 0.6666667 0.7500000 0.8000000 0.8333333\n\nw ^ q + q - w * q\n## [1]    1    5   55  609 7751\n\nsqrt(q)\n## [1] 1.000000 1.414214 1.732051 2.000000 2.236068"},{"path":"introR.html","id":"r_rec_rule","chapter":" 1 Вступ до R","heading":"1.5.1.2 Правило переписування","text":"Якщо вектори не однакової довжини й ми хочемо провести з ними певні операції, то в такому випадку спрацює правило переписування (recycling rule): якщо коротший вектор кратний довжині довшого, короткий буде повторюватися необхідну кількість разів.Операції з вектором та окремим значенням можна вважати окремим випадком рестайлінгу: окреме значення буде повторюватися необхідну кількість разів:Якщо коротший вектор не кратний довшому (наприклад, перший довжиною 2, а інший - 3), то R все одно порахує результат, але видасть попередження:","code":"\nq <- 1:2\nw <- 1:4\nq * w\n## [1] 1 4 3 8\nw * 2\n## [1] 2 4 6 8\nq + c(1, 5, 7)\n## Warning in q + c(1, 5, 7): longer object length is not a\n## multiple of shorter object length\n## [1] 2 7 8"},{"path":"introR.html","id":"r_vec_idx","chapter":" 1 Вступ до R","heading":"1.5.1.3 Індексація векторів","text":"Індексація - задача вибору окремого елемента структури даних. Для цього використовуються квадратні дужки [].Найпростіший варіант індексація по номеру, тобто порядкове значення елемента:Важливий факт - індексація в мові програмування R починається з 1.За допомогою індексації можна не лише звертатися до окремого елементу, а й заміняти його значення:Можна використовувати цілі вектори для індексації:Індексація зі знаком мінус видасть всі значення вектора крім обраних:","code":"\ne <- c(-5:-3, 2, 7, -6, 4:2)\ne[1]\n## [1] -5\n\ne[5]\n## [1] 7\ne[5] <- 15\ne[2:5]\n## [1] -4 -3  2 15\n\ne[6:1]\n## [1] -6 15  2 -3 -4 -5\ne[-1]\n## [1] -4 -3  2 15 -6  4  3  2\n\ne[c(-1, -5)]\n## [1] -4 -3  2 -6  4  3  2"},{"path":"introR.html","id":"r_matrix","chapter":" 1 Вступ до R","heading":"1.5.2 Матриці","text":"Матриця (matrix) — це двовимірний масив даних, в якому кожен елемент має однаковий тип (числовий, текстовий, логічний). Іншими словами, матриця - це двовимірний вектор, у якого є довжина та ширина.Створення матриці відбувається за допомогою функції matrix(), в якій слід вказати кількість рядків та стовпчиків:За замовчуванням значення матриці заповнюються по стовпчиках. Але це можна змінити за допомогою аргументу byrow = TRUEОскільки матриця — це двовимірний масив, то для індексації використовуються два індекси, що розділені комою: перший відповідає за рядок, другий за стовпчик.Якщо один з індексів залишити пустим — отримаємо всі значення рядка/стовпчика в залежності від того, який індекс ми не вказуємо.Аналогічно до вектора, за допомогою індексації можна переписувати частину матриці:","code":"\nmatrix(1:16, nrow = 4, ncol = 4)\n##      [,1] [,2] [,3] [,4]\n## [1,]    1    5    9   13\n## [2,]    2    6   10   14\n## [3,]    3    7   11   15\n## [4,]    4    8   12   16\nmatrix(1:16, nrow = 4, ncol = 4, byrow = TRUE)\n##      [,1] [,2] [,3] [,4]\n## [1,]    1    2    3    4\n## [2,]    5    6    7    8\n## [3,]    9   10   11   12\n## [4,]   13   14   15   16\nmy_matrix <- matrix(1:16, nrow = 4, ncol = 4)\nmy_matrix\n##      [,1] [,2] [,3] [,4]\n## [1,]    1    5    9   13\n## [2,]    2    6   10   14\n## [3,]    3    7   11   15\n## [4,]    4    8   12   16\n\nmy_matrix[2, 3]\n## [1] 10\n\nmy_matrix[1:2, 3:4]\n##      [,1] [,2]\n## [1,]    9   13\n## [2,]   10   14\nmy_matrix[, 1:2]\n##      [,1] [,2]\n## [1,]    1    5\n## [2,]    2    6\n## [3,]    3    7\n## [4,]    4    8\n\nmy_matrix[1:2, ]\n##      [,1] [,2] [,3] [,4]\n## [1,]    1    5    9   13\n## [2,]    2    6   10   14\nmy_matrix[1:2, 3:4] <- 0\nmy_matrix\n##      [,1] [,2] [,3] [,4]\n## [1,]    1    5    0    0\n## [2,]    2    6    0    0\n## [3,]    3    7   11   15\n## [4,]    4    8   12   16"},{"path":"introR.html","id":"r_array","chapter":" 1 Вступ до R","heading":"1.5.3 Масиви","text":"Масиви даних (array) — схожі на матриці, але мають понад два виміри. Створюються вони за допомогою функції array(), де слід вказати вектор, з якого буде створено масив, і його розмірність:","code":"\nmy_array <- array(1:16, c(4, 2, 2))\nmy_array\n## , , 1\n## \n##      [,1] [,2]\n## [1,]    1    5\n## [2,]    2    6\n## [3,]    3    7\n## [4,]    4    8\n## \n## , , 2\n## \n##      [,1] [,2]\n## [1,]    9   13\n## [2,]   10   14\n## [3,]   11   15\n## [4,]   12   16"},{"path":"introR.html","id":"r_list","chapter":" 1 Вступ до R","heading":"1.5.4 Списки","text":"Списки — це впорядкований набір об’єктів. Я представляю собі списки, як блокнот, в якому на кожній сторінці зберігається інформація у певному форматі. Вони можуть зберігати різні дані, в тому числі вектори, матриці, дата фрейми й інші списки.Списки створюються за допомогою функції list():В цьому випадку vec, gendalf та my_matrix — назви елементів списку.Для звернення до елементів списку можна використовувати індекси або імена (через символ $). При зверненні через індекс необхідно використовувати подвійні квадратні дужки, наприклад:Списки досить часто використовуються в R, наприклад результати побудови математичних моделей, статистичних тестів зберігаються у вигляді списків. тож важливо вміти з ними працювати.","code":"\nmy_list <- list(vec = c(1:5),\n                gendalf = \"You shall not pass\",\n                my_matrix = matrix(1:4, ncol = 2))\nmy_list\n## $vec\n## [1] 1 2 3 4 5\n## \n## $gendalf\n## [1] \"You shall not pass\"\n## \n## $my_matrix\n##      [,1] [,2]\n## [1,]    1    3\n## [2,]    2    4\nmy_list[[2]]\n## [1] \"You shall not pass\"\n\nmy_list$gendalf\n## [1] \"You shall not pass\"\n\nmy_list[['gendalf']]\n## [1] \"You shall not pass\""},{"path":"introR.html","id":"r_dataframe","chapter":" 1 Вступ до R","heading":"1.5.5 Дата фрейми","text":"Нарешті ми перейшли до найголовнішого - дата фрейми (data frames). Саме з такою структурою даних працюють найчастіше. Головною особливістю їх є те, що різні стовпчики можуть містити різний тип даних (але їх довжина має бути однаковою).\nДля створення дата фрейму використовується функція data.frame().Переглянути структуру дата фрейму можна за допомогою функції str():В нашому випадку перший та другий стовпчик - текстові, третя - числова, четверта - логічна.Переглянути назви стовпців або надати їм нову назву можна за допомогою функції names().Індексація аналогічно до матриці та списків можлива через [] та знак $.Для перегляду дата фрейму в RStudio використовується функція View() або можна просто натиснути на назву змінної у розділі Environment. Ви побачите таблицю, дещо схожу на Excel або Google Spreadsheets.","code":"\nmy_df <- data.frame(name = c(\"Frodo\", \"Eowyn\", \"Legolas\", \"Arwen\"),\n                    sex = c(\"male\", \"female\", \"male\", \"female\"),\n                    age = c(51, 24, 2931, 2700),\n                    one_ring = c(TRUE, FALSE, FALSE, FALSE))\nmy_df\nstr(my_df)\n## 'data.frame':    4 obs. of  4 variables:\n##  $ name    : chr  \"Frodo\" \"Eowyn\" \"Legolas\" \"Arwen\"\n##  $ sex     : chr  \"male\" \"female\" \"male\" \"female\"\n##  $ age     : num  51 24 2931 2700\n##  $ one_ring: logi  TRUE FALSE FALSE FALSE\nnames(my_df)\n## [1] \"name\"     \"sex\"      \"age\"      \"one_ring\"\nmy_df$name\n## [1] \"Frodo\"   \"Eowyn\"   \"Legolas\" \"Arwen\"\n\nmy_df$name[2:3]\n## [1] \"Eowyn\"   \"Legolas\"\n\nmy_df[2,3]\n## [1] 24\n\nmy_df[2:3, \"name\"]\n## [1] \"Eowyn\"   \"Legolas\""},{"path":"introR.html","id":"r_factors","chapter":" 1 Вступ до R","heading":"1.5.6 Фактори","text":"Фактори (factor) - спеціальний клас даних для збереження номінативних (якісних) змінних. Це можуть бути групи клієнтів, стать, якість обслуговування тощо.Для створення таких змінних використовується функція factor():При цьому всередині факторів можна зберігати впорядковані номінативні дані. Для цього необхідно вказати аргумент ordered = TRUE:","code":"\nrace <- factor(\n  c(\"istari\", \"human\", \"human\",\n    \"elf\", \"dwarf\", \"hobbit\",\n    \"hobbit\", \"hobbit\", \"hobbit\"),\n  levels = c(\"istari\", \"human\", \"elf\", \"dwarf\", \"hobbit\")\n  )\n\nrace\n## [1] istari human  human  elf    dwarf  hobbit hobbit hobbit\n## [9] hobbit\n## Levels: istari human elf dwarf hobbit\nlotr_books <- factor(c(\"The Fellowship of the Ring\",\n                       \"The Return of the King\",\n                       \"The Two Towers\"),\n                     levels = c(\"The Fellowship of the Ring\",\n                                \"The Two Towers\",\n                                \"The Return of the King\"),\n                     ordered = TRUE)\n\nlotr_books\n## [1] The Fellowship of the Ring The Return of the King    \n## [3] The Two Towers            \n## 3 Levels: The Fellowship of the Ring < ... < The Return of the King"},{"path":"introR.html","id":"r_packages","chapter":" 1 Вступ до R","heading":"1.6 Пакети в R","text":"R - мова програмування з дуже широкими можливостями. Однак рано чи пізно ми почнемо стикатися з задачами, які потребуватимуть додаткових можливостей. Ці можливості можна розширити за допомогою додаткових пакетів (packages).В більшості випадків основним змістом пакетів є набір додаткових функцій, даних або нових структур даних.До найпопулярніших пакетів у сфері науки про дані (data science) можна віднести екосистему пакетів tidyverse, пакети data.table, mlr3 та ще багато-багато інших.","code":""},{"path":"introR.html","id":"r_base_packages","chapter":" 1 Вступ до R","heading":"1.6.1 Вбудовані пакети","text":"Разом з самою мовою програмування R поставляються пакети, які не потрібно встановлювати: основний base та декілька інших, такі як stats, utils, graphics та інші. Повний перелік можна переглянути за наступним кодом:","code":"\nrownames(installed.packages(priority = \"base\"))\n##  [1] \"base\"      \"compiler\"  \"datasets\"  \"graphics\" \n##  [5] \"grDevices\" \"grid\"      \"methods\"   \"parallel\" \n##  [9] \"splines\"   \"stats\"     \"stats4\"    \"tcltk\"    \n## [13] \"tools\"     \"utils\""},{"path":"introR.html","id":"r_cran","chapter":" 1 Вступ до R","heading":"1.6.2 Встановлення пакетів з CRAN","text":"Пакети які пройшли перевірку зберігаються в Comprehensive R Archive Network (CRAN). Для перегляду кількості опублікованих пакетів на CRAN можна використати наступний код:І з кожним роком їх стає все більше:\n\nФункція install.packages() дозволяє звантажувати та встановлювати пакети з CRAN. Для прикладу встановимо пакет vroom, для зчитування файлів\nРисунок 1.5: Меню встановлення пакетів в RStudio\nАбо через кнопку в розділі Packages (рис. 1.6)\nРисунок 1.6: Кнопка встановлення пакетів\n\nРисунок 1.7: Меню встановлення пакетів\n","code":"\nnrow(available.packages())\n## [1] 18917\ninstall.packages(\"vroom\")"},{"path":"introR.html","id":"r_git","chapter":" 1 Вступ до R","heading":"1.6.3 Встановлення пакетів з GitHub","text":"Бувають випадки, коли автори пакетів не пройшли або не захотіли проходити перевірку через CRAN (насправді причин може бути безліч). В таких випадках пакет (який ви напевно знайшли через пошук в Google) скоріш за все буде зберігатися на репозиторію GitHub. Для таких випадків нам необхідно встановити пакет devtools та використати з нього функцію install_github(). Покажу на прикладі пакету xaringan, який я використовую для створення інтерактивних презентацій.Посилання yihui/xaringan — це адреса пакету в GitHub","code":"\ndevtools::install_github('yihui/xaringan')"},{"path":"introR.html","id":"r_lib","chapter":" 1 Вступ до R","heading":"1.6.4 Підключення пакетів","text":"Після завантаження пакета, для того щоб почати користуватися його функціоналом необхідно його підключити до поточної сесії. Для цього використовується функція library(). Назву пакету можна писати як в лапках так і без них.Як правило, підключення пакетів записується на початку скрипта, що дає можливість зрозуміти який інструментарій використовується в ньому.","code":"\nlibrary(vroom)"},{"path":"introR.html","id":"r_fun_call","chapter":" 1 Вступ до R","heading":"1.6.5 Виклик функції через ::","text":"У випадках, коли функцію з пакету буде використано вcього декілька разів, є сенс не підключати весь пакет, а завантажити тільки окрему його функцію. Для цього використовується спеціальний оператор ::, ліворуч від якого вказується назва пакету, а праворуч відповідна функція з обраного пакету.Крім того оператор :: корисний у випадках, коли в різних пакетах присутні функції з однаковою назвою. Наприклад в пакеті dplyr є функція filter(). Функція з такою ж назвою є в базовому пакеті stats, який використовується у зовсім інших задачах. В таких просто вкажіть з якого пакету ви хочете використати функцію:Пріоритет надається функціоналу пакету, який був підключений останній.","code":"\nvroom::vroom_example()\nstats::filter(1:10, rep(1,3))"},{"path":"dplyr.html","id":"dplyr","chapter":" 2 Маніпуляції з даними за допомогою dplyr","heading":" 2 Маніпуляції з даними за допомогою dplyr","text":"В минулій главі ми розібрали основні принципи мови програмування R. І тут слід зазначити, що окрім базового синтаксису існують й інші. Загалом, можна виділити три основні діалекти в мові програмування R:base: основний фундамент мови, який ми розібрали (але не повністю) раніше.base: основний фундамент мови, який ми розібрали (але не повністю) раніше.Tidyverse: окремий напрямок розвитку мови програмування R, що сконцентрований у напрямку науки про дані (data science).Tidyverse: окремий напрямок розвитку мови програмування R, що сконцентрований у напрямку науки про дані (data science).data.table: альтернативний напрямок, який дозволяє оброблювати об’ємні масиви даних за рекордний час “Database-Like Ops Benchmark” (n.d.).data.table: альтернативний напрямок, який дозволяє оброблювати об’ємні масиви даних за рекордний час “Database-Like Ops Benchmark” (n.d.).Їх можна сміло поєднувати в своїх проектах, що значним чином підвищує ефективність та швидкість роботи.","code":""},{"path":"dplyr.html","id":"tidy","chapter":" 2 Маніпуляції з даними за допомогою dplyr","heading":"2.1 Tidy-всесвіт","text":"Tidyverse — це екосистема, набір пакетів, які спеціально створені для науки про дані (data science). В ньому є ключові пакети (ядро tidyverse) та побічні — які додатково розширюють можливості мови програмування R.Концепція охайних даних (tidy-data) передбачає приведення даних до формату, в якому:Кожна змінна міститься в окремому стовпчикуКожна змінна міститься в окремому стовпчикуКожне спостереження міститься в окремому рядкуКожне спостереження міститься в окремому рядкуКожне значення міститься в окремій комірціКожне значення міститься в окремій комірціЯдро tidyverse:ggplot2, для візуалізаціїggplot2, для візуалізаціїdplyr, для маніпуляції з данимиdplyr, для маніпуляції з данимиtidyr, для отримання охайних даних (tidy data)tidyr, для отримання охайних даних (tidy data)readr, для зчитування та записування файлів в Rreadr, для зчитування та записування файлів в Rpurrr, для функціонального програмуванняpurrr, для функціонального програмуванняtibble, для роботи з тібблами (tibble), просунутий варіант дата фреймівtibble, для роботи з тібблами (tibble), просунутий варіант дата фреймівstringr, для роботи з текстовими данимиstringr, для роботи з текстовими данимиforcats, для роботи з факторами (factors)forcats, для роботи з факторами (factors)Крім того є ще низка допоміжних пакетів, які не входять до ядра tidyverse але вважаються його частиною:vroom, для швидкого завантаження данихvroom, для швидкого завантаження данихDBI, для роботи з базами данихDBI, для роботи з базами данихhaven, для даних SPSS, Stata та SAShaven, для даних SPSS, Stata та SAShttr, для роботи з APIhttr, для роботи з APIreadxl для завантаження .xls та .xlsx файлівreadxl для завантаження .xls та .xlsx файлівgooglesheets4, для роботи з Google Sheetgooglesheets4, для роботи з Google Sheetgoogledrive, для роботи з Google Drivegoogledrive, для роботи з Google Drivervest, для скрапінгу веб-сторінокrvest, для скрапінгу веб-сторінокjsonlite, для роботи з JSON-файламиjsonlite, для роботи з JSON-файламиxml2, для роботи з XMLxml2, для роботи з XMLlubridate, для роботи з датамиlubridate, для роботи з датамиdbplyr, для перетворення коду dplyr в SQLdbplyr, для перетворення коду dplyr в SQLdtplyr, для перетворення коду на data.tabledtplyr, для перетворення коду на data.tablemagrittr, для використання конвеєрів %>% (pipe)magrittr, для використання конвеєрів %>% (pipe)glue, для поєднання даних та текстуglue, для поєднання даних та текстуtidymodels, для роботи з моделями машнинного навчання.tidymodels, для роботи з моделями машнинного навчання.І це ще не повний список. Крім офіційних пакетів tidyverse є ще низка пакетів, які намагаються відповідати принципам tidyverse і доповнюють його.Головним чином, для роботи з даними, я зосереджу свою увагу на роботі з пакетом dplyr.Для завантаження tidyverse необхідно виконати наступний код:Для підключення:Концепція “охайних” даних передбачає альтернативу класичним data.frame у вигляді тібблів (tibble). Давайте розеберемо основі відмінності.\nВ мові програмування R є вбудований популярний датасет iris. Він зберігається в форматі дата фрейму.Давайте створемо його альтернативу у вигляді тібблу:Вже на цьому етапі видні основні відмінності: тіббл відображає одразу перші 10 спостережень і всі ствопчики, які поміщаються на екрані. Крім того до кожного стовпчика вказується його тип. Це дуже зручно, особливо коли працюєте з великим об’ємом даних.","code":"\ninstall.packages(\"tidyverse\")\nlibrary(\"tidyverse\")\n# Переглянемо перші декілька значень\nhead(iris)\n##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 1          5.1         3.5          1.4         0.2  setosa\n## 2          4.9         3.0          1.4         0.2  setosa\n## 3          4.7         3.2          1.3         0.2  setosa\n## 4          4.6         3.1          1.5         0.2  setosa\n## 5          5.0         3.6          1.4         0.2  setosa\n## 6          5.4         3.9          1.7         0.4  setosa\niris_tbl <- as_tibble(iris)\niris_tbl\n## # A tibble: 150 x 5\n##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n##           <dbl>       <dbl>        <dbl>       <dbl> <fct>  \n##  1          5.1         3.5          1.4         0.2 setosa \n##  2          4.9         3            1.4         0.2 setosa \n##  3          4.7         3.2          1.3         0.2 setosa \n##  4          4.6         3.1          1.5         0.2 setosa \n##  5          5           3.6          1.4         0.2 setosa \n##  6          5.4         3.9          1.7         0.4 setosa \n##  7          4.6         3.4          1.4         0.3 setosa \n##  8          5           3.4          1.5         0.2 setosa \n##  9          4.4         2.9          1.4         0.2 setosa \n## 10          4.9         3.1          1.5         0.1 setosa \n## # ... with 140 more rows"},{"path":"dplyr.html","id":"tidy_read","chapter":" 2 Маніпуляції з даними за допомогою dplyr","heading":"2.2 Завантаження даних","text":"","code":""},{"path":"dplyr.html","id":"tidy_csv","chapter":" 2 Маніпуляції з даними за допомогою dplyr","heading":"2.2.1 Завантаження .csv, .tsv файлів","text":"Стандартною функцією завантаження даних типу .csv є функція read.csv(), але на досить великих масивах даних краще використовувати read_csv() з пакету readr. Синтаксис цих функцій схожий, але read_csv() одразу приведе дані до формату tibble.\nПершим аргументом функції є шлях до файлу (із оберненим слешем /). Також можна використовувати прямі URL-посилання на файл:Аналогічно до read_csv() можна використовувати функцію vroom з однойменного пакету. Головною особливістю цього пакету є швидкість завантаження даних.Для завантаження одночасно декількох файлів однакової структури корисно використовувати наступну конструкцію","code":"\nread_file <- read_csv(\"docs/data/file.csv\")\nread_url <- read_csv(\"https://git.io/JztOr\")\nvroom_file <- vroom(\"docs/data/file.csv\")\nvroom_url <- vroom(\"https://git.io/JztOr\")\nfilse <- dir(pattern = \"\\\\.csv$\")\nvroom_all <- vroom(filse)"},{"path":"dplyr.html","id":"tidy_xls","chapter":" 2 Маніпуляції з даними за допомогою dplyr","heading":"2.2.2 Завантаження .xls, .xlsx файлів","text":"Для завантаження файлів Excel використовується пакет readxl та функція read_excel().\nНа початку можна отримати перелік листів файлу Excel за допомогою функції excel_sheets()Після чого зчитати данні з потрібного листаВ більшості випадків цього інструментарію має бути достатньо, але для завантаження специфічних файлів завжди можна знайти потрібний пакет. Не соромтеся використовувати google.","code":"\nreadxl::excel_sheets(\"docs/data/tourism.xlsx\")\n## [1] \"Sheet1\" \"Sheet2\" \"Sheet3\"\nexcel_file <- read_excel(\"docs/data/tourism.xlsx\", sheet = \"Sheet1\")"},{"path":"dplyr.html","id":"dplyr","chapter":" 2 Маніпуляції з даними за допомогою dplyr","heading":"2.3 Маніпуляції з даними за допомогою пакету dplyr","text":"dplyr - це граматика маніпуляції з даними, яка має низку функцій, які допоможуть легко та зручно маніпулювати даними, наприклад:створювати нові змінністворювати нові зміннісортувати данісортувати даніпроводити фільтрацію данихпроводити фільтрацію данихагрегування даних і багато іншого.агрегування даних і багато іншого.В якості прикладу роботи з пакетом dplyr пропоную використати датасет gapminder з однойменного пакету. В ньому збережена інформація про ВВП, очікувану тривалість життя при народженні та населення для 142 країн світу з 1952 по 2007 роки.Видно, що змінні country та continent — це фактори, а всі інші — числові.","code":"\n# Підключаємо пакет (не забудьте його встановити) та подивимось на датасет\nlibrary(gapminder)\ngapminder\n## # A tibble: 1,704 x 6\n##    country     continent  year lifeExp      pop gdpPercap\n##    <fct>       <fct>     <int>   <dbl>    <int>     <dbl>\n##  1 Afghanistan Asia       1952    28.8  8425333      779.\n##  2 Afghanistan Asia       1957    30.3  9240934      821.\n##  3 Afghanistan Asia       1962    32.0 10267083      853.\n##  4 Afghanistan Asia       1967    34.0 11537966      836.\n##  5 Afghanistan Asia       1972    36.1 13079460      740.\n##  6 Afghanistan Asia       1977    38.4 14880372      786.\n##  7 Afghanistan Asia       1982    39.9 12881816      978.\n##  8 Afghanistan Asia       1987    40.8 13867957      852.\n##  9 Afghanistan Asia       1992    41.7 16317921      649.\n## 10 Afghanistan Asia       1997    41.8 22227415      635.\n## # ... with 1,694 more rows"},{"path":"dplyr.html","id":"glimpse","chapter":" 2 Маніпуляції з даними за допомогою dplyr","heading":"2.3.1 dplyr::glimpse()","text":"Для перегляду структури тібблу використовується функція glimpse():Це альтернатива базовій функції str() для дата фреймів.","code":"\nglimpse(gapminder)\n## Rows: 1,704\n## Columns: 6\n## $ country   <fct> \"Afghanistan\", \"Afghanistan\", \"Afghanistan\"~\n## $ continent <fct> Asia, Asia, Asia, Asia, Asia, Asia, Asia, A~\n## $ year      <int> 1952, 1957, 1962, 1967, 1972, 1977, 1982, 1~\n## $ lifeExp   <dbl> 28.801, 30.332, 31.997, 34.020, 36.088, 38.~\n## $ pop       <int> 8425333, 9240934, 10267083, 11537966, 13079~\n## $ gdpPercap <dbl> 779.4453, 820.8530, 853.1007, 836.1971, 739~"},{"path":"dplyr.html","id":"filter","chapter":" 2 Маніпуляції з даними за допомогою dplyr","heading":"2.3.2 dplyr::filter()","text":"Для фільтрації спостережень за певною умовою використовується функція filter(). Для прикладу відфільтруємо дані для Ірландії:І тут я одразу хочу познайомити вас з альтернативним варіантом запису коду в синтаксисі tidyverse. Справа в тому, що якщо послідовно використовувати низку різноманітних функцій, то читаймість такого коду стає дуже низькою. Покажу на прикладі:До кожного значення вектора від 1 до 10 з кроком 1 розрахуємо сінус.До кожного значення вектора від 1 до 10 з кроком 1 розрахуємо сінус.З отриманого на першому кроці візьмемо абсолютні значення.З отриманого на першому кроці візьмемо абсолютні значення.З отриманого результату на 2 кроці візьмемо корінь квадратнийЗ отриманого результату на 2 кроці візьмемо корінь квадратнийВідсортуємо результат.Відсортуємо результат.В класичному вигляді все виглядає наступним чином:Погодьтесь, що розібрати такий код досить складно. Тому в діалекті tidyverse використовуються пайпи, %>%, (pipe) — вони передають результат попереднього розрахунку першим аргументов наступної функції. Таким чином попередній код можна переписати наступним чином:Погодьтесь, що такий код читається значно легше. Для виклику оператора %>% в RStudio використовується комбінація клавіш CTRL + SHIFT + M для Windows і CMD + SHIFT + M для Mac.Тож, якщо повернутися до фільтрації 2.3.2, код можна переписати:Тут і далі я буду часто використовувати пайпи.Розберемо ще приклади фільтрації даних. Відберемо дані Ірландії та Іспанії за 2007 рік:А тепер припустимо, що нам потрібно відібрати інформацію не по двом, а по низці країн. Переліковувати їх всіх через country == \"Назва_країни\" буде дуже довго і не зручно. В таких випадках зручно використовувати оператор %%. Давайте відберемо інформацію по Ірландії, Іспанії, Норвегії та Польщі за 2007 рік:Всі потрібні умови фільтрації можна переліковувати всередині функції filter() через кому.","code":"\nfilter(gapminder, country == \"Ireland\")\n## # A tibble: 12 x 6\n##    country continent  year lifeExp     pop gdpPercap\n##    <fct>   <fct>     <int>   <dbl>   <int>     <dbl>\n##  1 Ireland Europe     1952    66.9 2952156     5210.\n##  2 Ireland Europe     1957    68.9 2878220     5599.\n##  3 Ireland Europe     1962    70.3 2830000     6632.\n##  4 Ireland Europe     1967    71.1 2900100     7656.\n##  5 Ireland Europe     1972    71.3 3024400     9531.\n##  6 Ireland Europe     1977    72.0 3271900    11151.\n##  7 Ireland Europe     1982    73.1 3480000    12618.\n##  8 Ireland Europe     1987    74.4 3539900    13873.\n##  9 Ireland Europe     1992    75.5 3557761    17559.\n## 10 Ireland Europe     1997    76.1 3667233    24522.\n## 11 Ireland Europe     2002    77.8 3879155    34077.\n## 12 Ireland Europe     2007    78.9 4109086    40676.\nsort(sqrt(abs(sin(1:10))))\n##  [1] 0.3756594 0.5285977 0.6419646 0.7375779 0.8105471\n##  [6] 0.8699440 0.9173173 0.9535709 0.9792468 0.9946649\n1:10 %>% \n  sin() %>% \n  abs() %>% \n  sqrt() %>% \n  sort()\n##  [1] 0.3756594 0.5285977 0.6419646 0.7375779 0.8105471\n##  [6] 0.8699440 0.9173173 0.9535709 0.9792468 0.9946649\n# Попередній варіант\nfilter(gapminder, country == \"Ireland\")\n## # A tibble: 12 x 6\n##    country continent  year lifeExp     pop gdpPercap\n##    <fct>   <fct>     <int>   <dbl>   <int>     <dbl>\n##  1 Ireland Europe     1952    66.9 2952156     5210.\n##  2 Ireland Europe     1957    68.9 2878220     5599.\n##  3 Ireland Europe     1962    70.3 2830000     6632.\n##  4 Ireland Europe     1967    71.1 2900100     7656.\n##  5 Ireland Europe     1972    71.3 3024400     9531.\n##  6 Ireland Europe     1977    72.0 3271900    11151.\n##  7 Ireland Europe     1982    73.1 3480000    12618.\n##  8 Ireland Europe     1987    74.4 3539900    13873.\n##  9 Ireland Europe     1992    75.5 3557761    17559.\n## 10 Ireland Europe     1997    76.1 3667233    24522.\n## 11 Ireland Europe     2002    77.8 3879155    34077.\n## 12 Ireland Europe     2007    78.9 4109086    40676.\n\n# З використанням %>%\ngapminder %>% \n  filter(country == \"Ireland\")\n## # A tibble: 12 x 6\n##    country continent  year lifeExp     pop gdpPercap\n##    <fct>   <fct>     <int>   <dbl>   <int>     <dbl>\n##  1 Ireland Europe     1952    66.9 2952156     5210.\n##  2 Ireland Europe     1957    68.9 2878220     5599.\n##  3 Ireland Europe     1962    70.3 2830000     6632.\n##  4 Ireland Europe     1967    71.1 2900100     7656.\n##  5 Ireland Europe     1972    71.3 3024400     9531.\n##  6 Ireland Europe     1977    72.0 3271900    11151.\n##  7 Ireland Europe     1982    73.1 3480000    12618.\n##  8 Ireland Europe     1987    74.4 3539900    13873.\n##  9 Ireland Europe     1992    75.5 3557761    17559.\n## 10 Ireland Europe     1997    76.1 3667233    24522.\n## 11 Ireland Europe     2002    77.8 3879155    34077.\n## 12 Ireland Europe     2007    78.9 4109086    40676.\ngapminder %>% \n  filter(country == \"Ireland\" | country == \"Spain\",\n         year == 2007)\n## # A tibble: 2 x 6\n##   country continent  year lifeExp      pop gdpPercap\n##   <fct>   <fct>     <int>   <dbl>    <int>     <dbl>\n## 1 Ireland Europe     2007    78.9  4109086    40676.\n## 2 Spain   Europe     2007    80.9 40448191    28821.\ngapminder %>% \n  filter(country %in% c(\"Ireland\", \"Spain\", \"Norway\", \"Poland\"),\n         year == 2007)\n## # A tibble: 4 x 6\n##   country continent  year lifeExp      pop gdpPercap\n##   <fct>   <fct>     <int>   <dbl>    <int>     <dbl>\n## 1 Ireland Europe     2007    78.9  4109086    40676.\n## 2 Norway  Europe     2007    80.2  4627926    49357.\n## 3 Poland  Europe     2007    75.6 38518241    15390.\n## 4 Spain   Europe     2007    80.9 40448191    28821."},{"path":"dplyr.html","id":"slice","chapter":" 2 Маніпуляції з даними за допомогою dplyr","heading":"2.3.3 dplyr::slice()","text":"Для отримання зрізу даних, тобто тільки певних спостережень (перші, останні тощо) використовуються варіації функції slice().Перші п’ять спостережень:Перші п’ять та десяте спостереження:Всі крім перших трьох:Перші 15 спостережень:Останні 15 спостережень:Топ-3 з найбільшим значенням очікуваної тривалості життя:Топ-3 з найменшим значенням очікуваної тривалості життя:","code":"\ngapminder %>% \n  slice(1:5)\n## # A tibble: 5 x 6\n##   country     continent  year lifeExp      pop gdpPercap\n##   <fct>       <fct>     <int>   <dbl>    <int>     <dbl>\n## 1 Afghanistan Asia       1952    28.8  8425333      779.\n## 2 Afghanistan Asia       1957    30.3  9240934      821.\n## 3 Afghanistan Asia       1962    32.0 10267083      853.\n## 4 Afghanistan Asia       1967    34.0 11537966      836.\n## 5 Afghanistan Asia       1972    36.1 13079460      740.\ngapminder %>% \n  slice(1:5, 10)\n## # A tibble: 6 x 6\n##   country     continent  year lifeExp      pop gdpPercap\n##   <fct>       <fct>     <int>   <dbl>    <int>     <dbl>\n## 1 Afghanistan Asia       1952    28.8  8425333      779.\n## 2 Afghanistan Asia       1957    30.3  9240934      821.\n## 3 Afghanistan Asia       1962    32.0 10267083      853.\n## 4 Afghanistan Asia       1967    34.0 11537966      836.\n## 5 Afghanistan Asia       1972    36.1 13079460      740.\n## 6 Afghanistan Asia       1997    41.8 22227415      635.\ngapminder %>% \n  slice(-(1:3))\n## # A tibble: 1,701 x 6\n##    country     continent  year lifeExp      pop gdpPercap\n##    <fct>       <fct>     <int>   <dbl>    <int>     <dbl>\n##  1 Afghanistan Asia       1967    34.0 11537966      836.\n##  2 Afghanistan Asia       1972    36.1 13079460      740.\n##  3 Afghanistan Asia       1977    38.4 14880372      786.\n##  4 Afghanistan Asia       1982    39.9 12881816      978.\n##  5 Afghanistan Asia       1987    40.8 13867957      852.\n##  6 Afghanistan Asia       1992    41.7 16317921      649.\n##  7 Afghanistan Asia       1997    41.8 22227415      635.\n##  8 Afghanistan Asia       2002    42.1 25268405      727.\n##  9 Afghanistan Asia       2007    43.8 31889923      975.\n## 10 Albania     Europe     1952    55.2  1282697     1601.\n## # ... with 1,691 more rows\ngapminder %>% \n  slice_head(n = 15)\n## # A tibble: 15 x 6\n##    country     continent  year lifeExp      pop gdpPercap\n##    <fct>       <fct>     <int>   <dbl>    <int>     <dbl>\n##  1 Afghanistan Asia       1952    28.8  8425333      779.\n##  2 Afghanistan Asia       1957    30.3  9240934      821.\n##  3 Afghanistan Asia       1962    32.0 10267083      853.\n##  4 Afghanistan Asia       1967    34.0 11537966      836.\n##  5 Afghanistan Asia       1972    36.1 13079460      740.\n##  6 Afghanistan Asia       1977    38.4 14880372      786.\n##  7 Afghanistan Asia       1982    39.9 12881816      978.\n##  8 Afghanistan Asia       1987    40.8 13867957      852.\n##  9 Afghanistan Asia       1992    41.7 16317921      649.\n## 10 Afghanistan Asia       1997    41.8 22227415      635.\n## 11 Afghanistan Asia       2002    42.1 25268405      727.\n## 12 Afghanistan Asia       2007    43.8 31889923      975.\n## 13 Albania     Europe     1952    55.2  1282697     1601.\n## 14 Albania     Europe     1957    59.3  1476505     1942.\n## 15 Albania     Europe     1962    64.8  1728137     2313.\ngapminder %>% \n  slice_tail(n = 15)\n## # A tibble: 15 x 6\n##    country  continent  year lifeExp      pop gdpPercap\n##    <fct>    <fct>     <int>   <dbl>    <int>     <dbl>\n##  1 Zambia   Africa     1997    40.2  9417789     1071.\n##  2 Zambia   Africa     2002    39.2 10595811     1072.\n##  3 Zambia   Africa     2007    42.4 11746035     1271.\n##  4 Zimbabwe Africa     1952    48.5  3080907      407.\n##  5 Zimbabwe Africa     1957    50.5  3646340      519.\n##  6 Zimbabwe Africa     1962    52.4  4277736      527.\n##  7 Zimbabwe Africa     1967    54.0  4995432      570.\n##  8 Zimbabwe Africa     1972    55.6  5861135      799.\n##  9 Zimbabwe Africa     1977    57.7  6642107      686.\n## 10 Zimbabwe Africa     1982    60.4  7636524      789.\n## 11 Zimbabwe Africa     1987    62.4  9216418      706.\n## 12 Zimbabwe Africa     1992    60.4 10704340      693.\n## 13 Zimbabwe Africa     1997    46.8 11404948      792.\n## 14 Zimbabwe Africa     2002    40.0 11926563      672.\n## 15 Zimbabwe Africa     2007    43.5 12311143      470.\ngapminder %>% \n  slice_max(lifeExp, n = 3)\n## # A tibble: 3 x 6\n##   country          continent  year lifeExp       pop gdpPercap\n##   <fct>            <fct>     <int>   <dbl>     <int>     <dbl>\n## 1 Japan            Asia       2007    82.6 127467972    31656.\n## 2 Hong Kong, China Asia       2007    82.2   6980412    39725.\n## 3 Japan            Asia       2002    82   127065841    28605.\ngapminder %>% \n  slice_min(lifeExp, n = 3)\n## # A tibble: 3 x 6\n##   country     continent  year lifeExp     pop gdpPercap\n##   <fct>       <fct>     <int>   <dbl>   <int>     <dbl>\n## 1 Rwanda      Africa     1992    23.6 7290203      737.\n## 2 Afghanistan Asia       1952    28.8 8425333      779.\n## 3 Gambia      Africa     1952    30    284320      485."},{"path":"simple_regression.html","id":"simple_regression","chapter":" 3 Проста лінійна регресія","heading":" 3 Проста лінійна регресія","text":"text","code":""},{"path":"multiple_regression.html","id":"multiple_regression","chapter":" 4 Множинна лінійна регресія","heading":" 4 Множинна лінійна регресія","text":"text","code":""},{"path":"multicollinearity.html","id":"multicollinearity","chapter":" 5 Мультиколінеарність","heading":" 5 Мультиколінеарність","text":"text","code":""},{"path":"heteroskedasticity.html","id":"heteroskedasticity","chapter":" 6 Гетероскедастичність","heading":" 6 Гетероскедастичність","text":"text","code":""},{"path":"regularization.html","id":"regularization","chapter":" 7 Регуляризація","heading":" 7 Регуляризація","text":"text","code":""},{"path":"time_series.html","id":"time_series","chapter":" 8 Регресійний аналіз часових рядів","heading":" 8 Регресійний аналіз часових рядів","text":"text","code":""},{"path":"glm.html","id":"glm","chapter":" 9 GLM","heading":" 9 GLM","text":"text","code":""},{"path":"references.html","id":"references","chapter":"Література","heading":"Література","text":"text","code":""}]
